# Generated by Django 2.0.5 on 2018-10-15 11:11

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import guardian.mixins
import ozone.core.models.data
import ozone.core.models.party


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
            },
            bases=(guardian.mixins.GuardianUserMixin, models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Annex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annex_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'verbose_name_plural': 'annexes',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Article7Destruction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, max_length=512)),
                ('remarks_os', models.CharField(blank=True, max_length=512)),
                ('quantity_destroyed', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'db_table': 'reporting_article_seven_destruction',
            },
            bases=(ozone.core.models.data.BlendCompositionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Article7Emission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, max_length=512)),
                ('remarks_os', models.CharField(blank=True, max_length=512)),
                ('facility_name', models.CharField(max_length=256)),
                ('quantity_generated', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_feedstock', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_destroyed', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_emitted', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'db_table': 'reporting_article_seven_emissions',
            },
        ),
        migrations.CreateModel(
            name='Article7Export',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, max_length=512)),
                ('remarks_os', models.CharField(blank=True, max_length=512)),
                ('quantity_exempted', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('type_exempted', models.CharField(blank=True, choices=[('Critical use', 'CRITICAL'), ('Essential use', 'ESSENTIAL'), ('High ambient', 'HIGH_AMBIENT'), ('Process agent', 'PROCESS_AGENT'), ('Laboratory', 'LABORATORY'), ('Other', 'OTHER')], max_length=32)),
                ('quantity_total_new', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_total_recovered', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_feedstock', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_critical_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_critical_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_essential_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_essential_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_high_ambient_temperature', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_high_ambient_temperature', models.CharField(blank=True, max_length=256)),
                ('quantity_laboratory_analytical_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_laboratory_analytical_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_process_agent_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_process_agent_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_quarantine_pre_shipment', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_quarantine_pre_shipment', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'db_table': 'reporting_article_seven_exports',
            },
            bases=(ozone.core.models.data.BlendCompositionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Article7Flags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('flag_incomplete', models.BooleanField(default=True)),
                ('annex', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='incomplete_flags', to='core.Annex')),
            ],
            options={
                'db_table': 'reporting_article_seven_flags',
            },
        ),
        migrations.CreateModel(
            name='Article7Import',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, max_length=512)),
                ('remarks_os', models.CharField(blank=True, max_length=512)),
                ('quantity_exempted', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('type_exempted', models.CharField(blank=True, choices=[('Critical use', 'CRITICAL'), ('Essential use', 'ESSENTIAL'), ('High ambient', 'HIGH_AMBIENT'), ('Process agent', 'PROCESS_AGENT'), ('Laboratory', 'LABORATORY'), ('Other', 'OTHER')], max_length=32)),
                ('quantity_total_new', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_total_recovered', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_feedstock', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_critical_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_critical_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_essential_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_essential_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_high_ambient_temperature', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_high_ambient_temperature', models.CharField(blank=True, max_length=256)),
                ('quantity_laboratory_analytical_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_laboratory_analytical_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_process_agent_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_process_agent_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_quarantine_pre_shipment', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_quarantine_pre_shipment', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'db_table': 'reporting_article_seven_imports',
            },
            bases=(ozone.core.models.data.BlendCompositionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Article7NonPartyTrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, max_length=512)),
                ('remarks_os', models.CharField(blank=True, max_length=512)),
                ('quantity_import_new', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_import_recovered', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_export_new', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_export_recovered', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'db_table': 'reporting_article_seven_non_party_trade',
            },
            bases=(ozone.core.models.data.BlendCompositionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Article7Production',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, max_length=512)),
                ('remarks_os', models.CharField(blank=True, max_length=512)),
                ('quantity_exempted', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('type_exempted', models.CharField(blank=True, choices=[('Critical use', 'CRITICAL'), ('Essential use', 'ESSENTIAL'), ('High ambient', 'HIGH_AMBIENT'), ('Process agent', 'PROCESS_AGENT'), ('Laboratory', 'LABORATORY'), ('Other', 'OTHER')], max_length=32)),
                ('quantity_critical_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_critical_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_essential_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_essential_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_high_ambient_temperature', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_high_ambient_temperature', models.CharField(blank=True, max_length=256)),
                ('quantity_laboratory_analytical_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_laboratory_analytical_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_process_agent_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_process_agent_uses', models.CharField(blank=True, max_length=256)),
                ('quantity_quarantine_pre_shipment', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_quarantine_pre_shipment', models.CharField(blank=True, max_length=256)),
                ('quantity_total_produced', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_feedstock', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_article_5', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'db_table': 'reporting_article_seven_production',
            },
        ),
        migrations.CreateModel(
            name='Article7Questionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, max_length=512)),
                ('remarks_os', models.CharField(blank=True, max_length=512)),
                ('has_imports', models.BooleanField()),
                ('has_exports', models.BooleanField()),
                ('has_produced', models.BooleanField()),
                ('has_destroyed', models.BooleanField()),
                ('has_nonparty', models.BooleanField()),
                ('has_emissions', models.BooleanField()),
            ],
            options={
                'db_table': 'reporting_article_seven_questionnaire',
            },
        ),
        migrations.CreateModel(
            name='Blend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blend_id', models.CharField(max_length=64, unique=True)),
                ('composition', models.CharField(max_length=256)),
                ('other_names', models.CharField(blank=True, max_length=256)),
                ('type', models.CharField(choices=[('Zeotrope', 'ZEOTROPE'), ('Azeotrope', 'AZEOTROPE')], max_length=128)),
                ('odp', models.FloatField(null=True)),
                ('gwp', models.IntegerField(null=True)),
                ('hfc', models.NullBooleanField()),
                ('hcfc', models.NullBooleanField()),
                ('mp_control', models.CharField(blank=True, max_length=256)),
                ('main_usage', models.CharField(blank=True, max_length=256)),
                ('remark', models.CharField(blank=True, max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='BlendComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('blend', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='components', to='core.Blend')),
            ],
            options={
                'ordering': ('blend', 'substance'),
            },
        ),
        migrations.CreateModel(
            name='ControlMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('production_allowed', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('consumption_allowed', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('basic_domestic_needs_allowed', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
            ],
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decision_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('remark', models.CharField(blank=True, max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='ExemptionApproved',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('critical_uses_category', models.CharField(blank=True, max_length=256)),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('emergency', models.BooleanField(default=False)),
                ('approved_teap_amount', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('approved_amount', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_approved', models.CharField(blank=True, max_length=256)),
                ('laboratory_analytical_uses_category', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExemptionReported',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('critical_uses_category', models.CharField(blank=True, max_length=256)),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('quantity_exempted', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_produced', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_imported', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_open_bal', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_essential_uses', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_exported', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_destroyed', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(default='', max_length=64, unique=True)),
                ('description', models.CharField(max_length=256)),
                ('phase_out_year_article_5', models.DateField(blank=True, null=True)),
                ('phase_out_year_non_article_5', models.DateField(blank=True, null=True)),
                ('exemption', models.CharField(blank=True, choices=[('Critical use', 'CRITICAL'), ('Essential use', 'ESSENTIAL'), ('High ambient', 'HIGH_AMBIENT'), ('Process agent', 'PROCESS_AGENT'), ('Laboratory', 'LABORATORY'), ('Other', 'OTHER')], max_length=64)),
                ('annex', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='groups', to='core.Annex')),
            ],
            options={
                'ordering': ('annex', 'group_id'),
            },
        ),
        migrations.CreateModel(
            name='HighAmbientTemperatureImport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, max_length=512)),
                ('remarks_os', models.CharField(blank=True, max_length=512)),
                ('quantity_msac_produced', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_sdac_produced', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_dcpac_produced', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('blend', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Blend')),
                ('blend_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='core.HighAmbientTemperatureImport')),
            ],
            options={
                'abstract': False,
            },
            bases=(ozone.core.models.data.BlendCompositionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HighAmbientTemperatureProduction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, max_length=512)),
                ('remarks_os', models.CharField(blank=True, max_length=512)),
                ('quantity_msac_produced', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_sdac_produced', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_dcpac_produced', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('remark', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Limit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('production', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('consumption', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('basic_domestic_needs_production', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limits', to='core.Group')),
            ],
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting_id', models.CharField(max_length=16, unique=True)),
                ('treaty_flag', models.BooleanField(default=False)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('location', models.CharField(max_length=128)),
                ('description', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ('pk',),
            },
        ),
        migrations.CreateModel(
            name='Nomination',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nomination_id', models.CharField(max_length=16, unique=True)),
                ('submit_date', models.DateField()),
                ('submit_amount', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('remark', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'ordering': ('nomination_id',),
            },
        ),
        migrations.CreateModel(
            name='Obligation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.CharField(blank=True, max_length=256)),
                ('is_continuous', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('abbr', models.CharField(max_length=32, unique=True)),
                ('signed_vienna_convention', models.DateField(blank=True, null=True)),
                ('ratification_date_vienna_convention', models.DateField(blank=True, null=True)),
                ('ratification_type_vienna_convention', models.CharField(blank=True, choices=[('Accession', 'ACCESSION'), ('Approval', 'APPROVAL'), ('Acceptance', 'ACCEPTANCE'), ('Ratification', 'RATIFICATION'), ('Succession', 'SUCCESSION'), ('Signing', 'SIGNING')], max_length=40)),
                ('signed_montreal_protocol', models.DateField(blank=True, null=True)),
                ('ratification_date_montreal_protocol', models.DateField(blank=True, null=True)),
                ('ratification_type_montreal_protocol', models.CharField(blank=True, choices=[('Accession', 'ACCESSION'), ('Approval', 'APPROVAL'), ('Acceptance', 'ACCEPTANCE'), ('Ratification', 'RATIFICATION'), ('Succession', 'SUCCESSION'), ('Signing', 'SIGNING')], max_length=40)),
                ('ratification_date_london_amendment', models.DateField(blank=True, null=True)),
                ('ratification_type_london_amendment', models.CharField(blank=True, choices=[('Accession', 'ACCESSION'), ('Approval', 'APPROVAL'), ('Acceptance', 'ACCEPTANCE'), ('Ratification', 'RATIFICATION'), ('Succession', 'SUCCESSION'), ('Signing', 'SIGNING')], max_length=40)),
                ('ratification_date_copenhagen_amendment', models.DateField(blank=True, null=True)),
                ('ratification_type_copenhagen_amendment', models.CharField(blank=True, choices=[('Accession', 'ACCESSION'), ('Approval', 'APPROVAL'), ('Acceptance', 'ACCEPTANCE'), ('Ratification', 'RATIFICATION'), ('Succession', 'SUCCESSION'), ('Signing', 'SIGNING')], max_length=40)),
                ('ratification_date_montreal_amendment', models.DateField(blank=True, null=True)),
                ('ratification_type_montreal_amendment', models.CharField(blank=True, choices=[('Accession', 'ACCESSION'), ('Approval', 'APPROVAL'), ('Acceptance', 'ACCEPTANCE'), ('Ratification', 'RATIFICATION'), ('Succession', 'SUCCESSION'), ('Signing', 'SIGNING')], max_length=40)),
                ('ratification_date_beijing_amendment', models.DateField(blank=True, null=True)),
                ('ratification_type_beijing_amendment', models.CharField(blank=True, choices=[('Accession', 'ACCESSION'), ('Approval', 'APPROVAL'), ('Acceptance', 'ACCEPTANCE'), ('Ratification', 'RATIFICATION'), ('Succession', 'SUCCESSION'), ('Signing', 'SIGNING')], max_length=40)),
                ('ratification_date_kigali_amendment', models.DateField(blank=True, null=True)),
                ('ratification_type_kigali_amendment', models.CharField(blank=True, choices=[('Accession', 'ACCESSION'), ('Approval', 'APPROVAL'), ('Acceptance', 'ACCEPTANCE'), ('Ratification', 'RATIFICATION'), ('Succession', 'SUCCESSION'), ('Signing', 'SIGNING')], max_length=40)),
                ('remark', models.CharField(blank=True, max_length=512)),
                ('parent_party', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_parties', to='core.Party')),
            ],
            options={
                'verbose_name_plural': 'parties',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='PartyHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator, ozone.core.models.party.max_value_current_year])),
                ('population', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('party_type', models.CharField(blank=True, choices=[('Article 5', 'A5'), ('Article 5 Group 1', 'A5G1'), ('Article 5 Group 2', 'A5G2'), ('Non Article 5', 'NA5')], max_length=40)),
                ('is_high_ambient_temperature', models.BooleanField()),
                ('is_eu_member', models.BooleanField()),
                ('is_ceit', models.BooleanField()),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='history', to='core.Party')),
            ],
            options={
                'verbose_name_plural': 'parties history',
                'ordering': ('party', 'year'),
            },
        ),
        migrations.CreateModel(
            name='PartyRatification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ratification_type', models.CharField(blank=True, choices=[('Accession', 'ACCESSION'), ('Approval', 'APPROVAL'), ('Acceptance', 'ACCEPTANCE'), ('Ratification', 'RATIFICATION'), ('Succession', 'SUCCESSION'), ('Signing', 'SIGNING')], max_length=40)),
                ('date', models.DateField()),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ratifications', to='core.Party')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessAgentApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decision', models.CharField(blank=True, max_length=256)),
                ('counter', models.PositiveIntegerField()),
                ('application', models.CharField(max_length=256)),
                ('remark', models.CharField(blank=True, max_length=512)),
            ],
        ),
        migrations.CreateModel(
            name='ProcessAgentContainTechnology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contain_technology', models.CharField(max_length=512)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Party')),
            ],
        ),
        migrations.CreateModel(
            name='ProcessAgentEmissionLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decision', models.CharField(max_length=256)),
                ('makeup_consumption', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('max_emissions', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0)])),
                ('remark', models.CharField(blank=True, max_length=512)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='process_agent_emission_limits', to='core.Party')),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbr', models.CharField(max_length=32, unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('remark', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ReportingPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('is_year', models.BooleanField(default=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('description', models.CharField(blank=True, max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schema_version', models.CharField(max_length=64)),
                ('filled_by_secretariat', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('_workflow_class', models.CharField(choices=[('empty', 'Empty'), ('base', 'Base'), ('default', 'Default'), ('accelerated', 'Accelerated')], db_column='workflow_class', default='empty', max_length=32)),
                ('_current_state', models.CharField(blank=True, db_column='current_state', max_length=64, null=True)),
                ('_previous_state', models.CharField(blank=True, db_column='previous_state', max_length=64, null=True)),
                ('flag_provisional', models.BooleanField(default=False)),
                ('flag_valid', models.NullBooleanField(default=None)),
                ('flag_superseded', models.BooleanField(default=False)),
                ('submitted_via', models.CharField(choices=[('Web form', 'WEBFORM'), ('Email', 'EMAIL')], max_length=32)),
                ('remarks_party', models.CharField(blank=True, max_length=512)),
                ('remarks_secretariat', models.CharField(blank=True, max_length=512)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions_created', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions_last_edited', to=settings.AUTH_USER_MODEL)),
                ('obligation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions', to='core.Obligation')),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions', to='core.Party')),
                ('reporting_period', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions', to='core.ReportingPeriod')),
            ],
        ),
        migrations.CreateModel(
            name='Subregion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbr', models.CharField(max_length=32)),
                ('name', models.CharField(max_length=256)),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subregions', to='core.Region')),
            ],
            options={
                'ordering': ('region', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Substance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('substance_id', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(max_length=256)),
                ('odp', models.FloatField()),
                ('min_odp', models.FloatField()),
                ('max_odp', models.FloatField()),
                ('gwp', models.IntegerField(null=True)),
                ('formula', models.CharField(max_length=256)),
                ('number_of_isomers', models.SmallIntegerField(null=True)),
                ('gwp2', models.IntegerField(null=True)),
                ('gwp_error_plus_minus', models.IntegerField(null=True)),
                ('carbons', models.CharField(blank=True, max_length=128)),
                ('hydrogens', models.CharField(blank=True, max_length=128)),
                ('fluorines', models.CharField(blank=True, max_length=128)),
                ('chlorines', models.CharField(blank=True, max_length=128)),
                ('bromines', models.CharField(blank=True, max_length=128)),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('r_code', models.CharField(blank=True, max_length=128, null=True, unique=True)),
                ('mp_control', models.CharField(blank=True, max_length=256)),
                ('main_usage', models.CharField(blank=True, max_length=256)),
                ('annex', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='substances', to='core.Annex')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='substances', to='core.Group')),
            ],
            options={
                'ordering': ('group', 'substance_id'),
            },
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, max_length=512)),
                ('remarks_os', models.CharField(blank=True, max_length=512)),
                ('transfer_type', models.CharField(choices=[('P', 'Production'), ('C', 'Consumption')], max_length=1)),
                ('transferred_amount', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('used_amount', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('is_basic_domestic_need', models.BooleanField(default=False)),
                ('destination_party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_transfers', to='core.Party')),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers', to='core.Submission')),
                ('substance', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransitionEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('transition', models.CharField(max_length=60)),
                ('from_state', models.CharField(max_length=60)),
                ('to_state', models.CharField(max_length=60)),
                ('extra', django.contrib.postgres.fields.jsonb.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transition_events', to='core.Submission')),
                ('triggered_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transitions_triggered', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'workflow event',
            },
        ),
        migrations.CreateModel(
            name='Treaty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treaty_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('date', models.DateField()),
                ('entry_into_force_date', models.DateField()),
                ('base_year', models.IntegerField(null=True)),
                ('description', models.CharField(blank=True, max_length=256)),
                ('meeting_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='treaty', to='core.Meeting')),
            ],
            options={
                'verbose_name_plural': 'treaties',
            },
        ),
        migrations.CreateModel(
            name='UsesType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uses_type_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('decision_flag', models.BooleanField()),
                ('forms', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='processagentcontaintechnology',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='processagentapplication',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='partyratification',
            name='treaty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ratifications', to='core.Treaty'),
        ),
        migrations.AddField(
            model_name='party',
            name='subregion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='parties', to='core.Subregion'),
        ),
        migrations.AddField(
            model_name='nomination',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nominations', to='core.Party'),
        ),
        migrations.AddField(
            model_name='nomination',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nominations', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='nomination',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='nomination',
            name='uses_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nominations', to='core.UsesType'),
        ),
        migrations.AddField(
            model_name='limit',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limits', to='core.Party'),
        ),
        migrations.AddField(
            model_name='limit',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limits', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='highambienttemperatureproduction',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='highambienttemperatureproductions', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='highambienttemperatureproduction',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='highambienttemperatureimport',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='highambienttemperatureimports', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='highambienttemperatureimport',
            name='substance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='group',
            name='control_treaty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='control_substance_groups', to='core.Treaty'),
        ),
        migrations.AddField(
            model_name='group',
            name='report_treaty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='report_substance_groups', to='core.Treaty'),
        ),
        migrations.AddField(
            model_name='exemptionreported',
            name='import_party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Party'),
        ),
        migrations.AddField(
            model_name='exemptionreported',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exemptionreporteds', to='core.Party'),
        ),
        migrations.AddField(
            model_name='exemptionreported',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='exemptionreported',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='exemptionreported',
            name='uses_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.UsesType'),
        ),
        migrations.AddField(
            model_name='exemptionapproved',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exemptionapproveds', to='core.Party'),
        ),
        migrations.AddField(
            model_name='exemptionapproved',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='exemptionapproved',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='exemptionapproved',
            name='uses_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.UsesType'),
        ),
        migrations.AddField(
            model_name='decision',
            name='meeting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='decisions', to='core.Meeting'),
        ),
        migrations.AddField(
            model_name='controlmeasure',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='control_measures', to='core.Group'),
        ),
        migrations.AddField(
            model_name='controlmeasure',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='control_measures', to='core.Party'),
        ),
        migrations.AddField(
            model_name='controlmeasure',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='control_measures', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='blendcomponent',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='blends', to='core.Substance'),
        ),
        migrations.AddField(
            model_name='article7questionnaire',
            name='submission',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='article7questionnaire', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7production',
            name='decision',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Decision'),
        ),
        migrations.AddField(
            model_name='article7production',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article7productions', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7production',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='article7nonpartytrade',
            name='blend',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Blend'),
        ),
        migrations.AddField(
            model_name='article7nonpartytrade',
            name='blend_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='core.Article7NonPartyTrade'),
        ),
        migrations.AddField(
            model_name='article7nonpartytrade',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article7nonpartytrades', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7nonpartytrade',
            name='substance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='article7nonpartytrade',
            name='trade_party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Party'),
        ),
        migrations.AddField(
            model_name='article7import',
            name='blend',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Blend'),
        ),
        migrations.AddField(
            model_name='article7import',
            name='blend_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='core.Article7Import'),
        ),
        migrations.AddField(
            model_name='article7import',
            name='decision',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Decision'),
        ),
        migrations.AddField(
            model_name='article7import',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article7imports', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7import',
            name='substance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='article7flags',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='incomplete_flags', to='core.Group'),
        ),
        migrations.AddField(
            model_name='article7flags',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='incomplete_flags', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7export',
            name='blend',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Blend'),
        ),
        migrations.AddField(
            model_name='article7export',
            name='blend_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='core.Article7Export'),
        ),
        migrations.AddField(
            model_name='article7export',
            name='decision',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Decision'),
        ),
        migrations.AddField(
            model_name='article7export',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article7exports', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7export',
            name='substance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='article7emission',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article7emissions', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7destruction',
            name='blend',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Blend'),
        ),
        migrations.AddField(
            model_name='article7destruction',
            name='blend_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='core.Article7Destruction'),
        ),
        migrations.AddField(
            model_name='article7destruction',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='article7destructions', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7destruction',
            name='substance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='transitionevent',
            unique_together={('timestamp', 'submission', 'from_state', 'to_state')},
        ),
        migrations.AlterUniqueTogether(
            name='subregion',
            unique_together={('abbr', 'region')},
        ),
        migrations.AlterUniqueTogether(
            name='submission',
            unique_together={('party', 'reporting_period', 'obligation', 'version')},
        ),
        migrations.AlterUniqueTogether(
            name='partyhistory',
            unique_together={('party', 'year')},
        ),
    ]
