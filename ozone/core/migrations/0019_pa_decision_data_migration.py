# Generated by Django 2.1.4 on 2020-02-12 13:36
import logging

from django.db import migrations


logger = logging.getLogger(__name__)


def populate_decisions(apps, schema_editor):
    stream = logging.StreamHandler()
    stream.setFormatter(logging.Formatter(
        '%(asctime)s %(levelname)s %(message)s'
    ))
    logger.addHandler(stream)
    logger.setLevel(logging.INFO)

    ProcessAgentApplication = apps.get_model(
        'core', 'ProcessAgentApplication'
    )
    ProcessAgentEmissionLimit = apps.get_model(
        'core', 'ProcessAgentEmissionLimit'
    )
    ProcessAgentDecision = apps.get_model(
        'core', 'ProcessAgentDecision'
    )
    for application in ProcessAgentApplication.objects.all():
        # Get or create a decision based on application's validity
        if application.validity is not None:
            pa_decision, created = ProcessAgentDecision.objects.get_or_create(
                decision=application.validity.decision,
                application_validity_start_date=application.validity.start_date,
                application_validity_end_date=application.validity.end_date
            )
            if created:
                logger.info(
                    f'Decision {pa_decision} created: set application validity '
                    f'start date to {application.validity.start_date}; '
                    f'end date to {application.validity.end_date}.'
                )
        else:
            pa_decision = None
        # Then add it to the application
        application.decision = pa_decision
        application.save()

    for emission_limit in ProcessAgentEmissionLimit.objects.all():
        # Get or create a decision based on emission's limit validity
        if emission_limit.validity is not None:
            pa_decision, created = ProcessAgentDecision.objects.get_or_create(
                decision=emission_limit.validity.decision,
            )
            pa_decision.emit_limits_validity_start_date = emission_limit.validity.start_date
            pa_decision.emit_limits_validity_end_date = emission_limit.validity.end_date
            pa_decision.save()
            logger.info(
                f'Decision {pa_decision}: set emission limit validity '
                f'start date to {emission_limit.validity.start_date}; '
                f'end date to {emission_limit.validity.end_date}.'
            )
        else:
            pa_decision = None
        # Then add it to the application
        emission_limit.decision = pa_decision
        emission_limit.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0018_process_agent_decision'),
    ]

    operations = [
        migrations.RunPython(populate_decisions)
    ]
