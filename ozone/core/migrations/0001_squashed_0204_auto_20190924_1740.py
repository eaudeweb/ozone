# Generated by Django 2.1.4 on 2019-10-01 12:15

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
import guardian.mixins
import ozone.core.models.data
import ozone.core.models.file
import ozone.core.models.reporting
import simple_history.models


class Migration(migrations.Migration):

    replaces = [
        ('core', '0001_initial'),
        ('core', '0002_auto_20181018_0857'),
        ('core', '0003_auto_20181019_1314'),
        ('core', '0004_blend_custom'),
        ('core', '0005_auto_20181019_1402'),
        ('core', '0006_auto_20181030_0919'),
        ('core', '0007_auto_20181102_1011'),
        ('core', '0008_submission_cloned_from'),
        ('core', '0009_on_delete_protect_for_submission_data'),
        ('core', '0010_auto_20181120_2036'),
        ('core', '0011_auto_20181122_0920'),
        ('core', '0012_substance_sort_order'),
        ('core', '0013_auto_20181122_1738'),
        ('core', '0014_adding_ordering_id_field'),
        ('core', '0015_obligation_form_type'),
        ('core', '0016_party_in_custom_blends'),
        ('core', '0017_auto_20181126_0927'),
        ('core', '0018_auto_20181126_1123'),
        ('core', '0019_make_substance_blankable'),
        ('core', '0020_src_dst_parties_nullable'),
        ('core', '0021_auto_20181127_1122'),
        ('core', '0022_make_group_nullable'),
        ('core', '0023_remove_article7questionnaire_ordering_id'),
        ('core', '0024_auto_20181128_1715'),
        ('core', '0025_auto_20181129_0924'),
        ('core', '0026_remove_reportingperiod_is_year'),
        ('core', '0027_auto_20181204_1355'),
        ('core', '0028_user_is_read_only'),
        ('core', '0029_auto_20181206_1507'),
        ('core', '0030_auto_20181207_0649'),
        ('core', '0031_blend_sort_order'),
        ('core', '0032_auto_20181210_1807'),
        ('core', '0033_substance_is_contained_in_polyols'),
        ('core', '0034_auto_20181211_0827'),
        ('core', '0035_party_type_model'),
        ('core', '0036_obligations'),
        ('core', '0037_auto_20181211_1355'),
        ('core', '0038_auto_20181212_1357'),
        ('core', '0039_quantity_polyols'),
        ('core', '0040_remove_unk_and_czs'),
        ('core', '0041_auto_20181217_0823'),
        ('core', '0042_auto_20181218_1343'),
        ('core', '0043_submission_flags'),
        ('core', '0044_remove_flags_model'),
        ('core', '0045_add_submitted_at_field'),
        ('core', '0046_auto_20181221_1212'),
        ('core', '0047_auto_20181221_1325'),
        ('core', '0048_remove_filled_by_secretariat'),
        ('core', '0049_auto_20190103_1844'),
        ('core', '0050_submissionfile_uploadtoken'),
        ('core', '0051_auto_20190107_1724'),
        ('core', '0052_auto_20190107_1628'),
        ('core', '0053_auto_20190107_1654'),
        ('core', '0054_submission_info_oentoone'),
        ('core', '0055_help_texts'),
        ('core', '0056_submission_info_non_nullable_onetoone'),
        ('core', '0057_auto_20190109_1348'),
        ('core', '0058_auto_20190110_1426'),
        ('core', '0059_auto_20190114_1645'),
        ('core', '0060_obligations'),
        ('core', '0061_tus_id_in_file_model'),
        ('core', '0062_auto_20190116_1601'),
        ('core', '0063_auto_20190116_1636'),
        ('core', '0064_auto_20190117_1129'),
        ('core', '0065_auto_20190117_1606'),
        ('core', '0066_auto_20190118_1507'),
        ('core', '0067_auto_20190118_1634'),
        ('core', '0068_auto_20190121_1500'),
        ('core', '0069_auto_20190123_1635'),
        ('core', '0070_auto_20190123_2007'),
        ('core', '0071_removing_mp_control'),
        ('core', '0072_auto_20190125_1240'),
        ('core', '0073_auto_20190129_1553'),
        ('core', '0074_auto_20190201_1847'),
        ('core', '0075_auto_20190205_1808'),
        ('core', '0076_submission_file_delete_cascade'),
        ('core', '0077_auto_20190211_1219'),
        ('core', '0078_exemption_nomination_typo'),
        ('core', '0079_auto_20190211_1639'),
        ('core', '0080_questionnaire_remarks'),
        ('core', '0081_raf_models'),
        ('core', '0082_remove_fax_field'),
        ('core', '0083_adding_postal_address'),
        ('core', '0084_removing_postal_code'),
        ('core', '0085_auto_20190219_1233'),
        ('core', '0086_alter_submitted_at'),
        ('core', '0087_auto_20190220_1225'),
        ('core', '0088_auto_20190225_1239'),
        ('core', '0089_auto_20190226_2025'),
        ('core', '0090_auto_20190301_1252'),
        ('core', '0091_auto_20190301_1323'),
        ('core', '0092_auto_20190301_1538'),
        ('core', '0093_auto_20190304_1516'),
        ('core', '0094_auto_20190304_1742'),
        ('core', '0095_auto_20190311_1345'),
        ('core', '0096_reporting_channel_defaults'),
        ('core', '0097_auto_20190313_1447'),
        ('core', '0098_remove_questionnaire_remarks'),
        ('core', '0099_nullable_questionnaire_answers'),
        ('core', '0100_default_language'),
        ('core', '0101_set_language_existing_users'),
        ('core', '0102_defaults_for_submission_format'),
        ('core', '0103_make_language_mandatory'),
        ('core', '0104_auto_20190326_1811'),
        ('core', '0105_auto_20190327_1458'),
        ('core', '0106_auto_20190328_1206'),
        ('core', '0107_auto_20190329_1105'),
        ('core', '0108_auto_20190401_1136'),
        ('core', '0109_auto_20190401_1515'),
        ('core', '0110_aggregations_20190411_1205'),
        ('core', '0111_removing_essen_crit_type'),
        ('core', '0112_uses_type_table_name'),
        ('core', '0113_more_aggregation_fields'),
        ('core', '0114_limits_table_names'),
        ('core', '0115_auto_20190417_1054'),
        ('core', '0116_add_fields_descriptions'),
        ('core', '0117_nullable_baselines_limits'),
        ('core', '0118_auto_20190423_1629'),
        ('core', '0119_auto_20190507_1516'),
        ('core', '0120_auto_20190510_1131'),
        ('core', '0121_auto_20190510_1542'),
        ('core', '0122_auto_20190510_1856'),
        ('core', '0123_auto_20190513_1059'),
        ('core', '0124_auto_20190514_1238'),
        ('core', '0125_mt_aggregations'),
        ('core', '0126_auto_20190514_1646'),
        ('core', '0127_compute_quantity_exempted'),
        ('core', '0128_auto_20190516_1550'),
        ('core', '0129_auto_20190516_1838'),
        ('core', '0130_auto_20190518_1947'),
        ('core', '0131_quantity_exempted_editable'),
        ('core', '0132_substance_ordering'),
        ('core', '0133_obligation_is_active'),
        ('core', '0134_auto_20190521_1629'),
        ('core', '0135_transfers_remarks_workflow'),
        ('core', '0136_nomination_is_emergency'),
        ('core', '0137_auto_20190527_1603'),
        ('core', '0138_auto_20190527_1621'),
        ('core', '0139_aggregations_submissions'),
        ('core', '0140_critical_use_categories'),
        ('core', '0141_auto_20190530_1249'),
        ('core', '0142_auto_20190603_1532'),
        ('core', '0143_proc_agent_workflows'),
        ('core', '0144_auto_20190605_1153'),
        ('core', '0145_auto_20190605_1403'),
        ('core', '0146_pa_remarks_secretariat'),
        ('core', '0147_auto_20190606_1436'),
        ('core', '0148_auto_20190606_1743'),
        ('core', '0149_transfer_amount_mandatory'),
        ('core', '0150_gwp_float_blends'),
        ('core', '0151_gwp_baseline'),
        ('core', '0152_blend_substance_ordering'),
        ('core', '0153_emails'),
        ('core', '0154_auto_20190625_1614'),
        ('core', '0155_auto_20190626_1005'),
        ('core', '0156_auto_20190626_1046'),
        ('core', '0157_auto_20190628_1605'),
        ('core', '0158_auto_20190701_1151'),
        ('core', '0159_auto_20190701_1238'),
        ('core', '0160_obligation_has_versions'),
        ('core', '0161_deviation_sources'),
        ('core', '0162_pluralization_emails'),
        ('core', '0163_plans_of_action'),
        ('core', '0164_plan_of_action_fields'),
        ('core', '0165_pluralization_prodcons'),
        ('core', '0166_party_sign_dates'),
        ('core', '0167_party_declaration'),
        ('core', '0168_approvedcriticaluses'),
        ('core', '0169_nullable_category'),
        ('core', '0170_auto_20190801_1816'),
        ('core', '0171_auto_20190802_1130'),
        ('core', '0172_auto_20190806_1202'),
        ('core', '0173_auto_20190806_1635'),
        ('core', '0174_auto_20190806_1817'),
        ('core', '0175_auto_20190808_1447'),
        ('core', '0176_auto_20190808_1952'),
        ('core', '0177_auto_20190808_2021'),
        ('core', '0178_auto_20190808_2040'),
        ('core', '0179_auto_20190812_1445'),
        ('core', '0180_auto_20190813_1635'),
        ('core', '0181_time_reported_f'),
        ('core', '0182_date_reported_f'),
        ('core', '0183_exemptions_processing_state'),
        ('core', '0184_focal_points_illegal_trade_ordering'),
        ('core', '0185_remove_acc_exemption_wf_class'),
        ('core', '0186_mlf_dates'),
        ('core', '0187_ECE_abbr'),
        ('core', '0188_party_isactive'),
        ('core', '0189_remove_exemption_flag_approved'),
        ('core', '0190_auto_20190829_1351'),
        ('core', '0191_licensing_system_files_urls'),
        ('core', '0192_checked_blanks_false'),
        ('core', '0193_auto_20190917_1219'),
        ('core', '0194_licensing_system_meta'),
        ('core', '0195_auto_20190917_1651'),
        ('core', '0196_substances_formula_optional'),
        ('core', '0197_prodcons_party_flags'),
        ('core', '0198_populate_new_prodcons_flags'),
        ('core', '0199_truly_properly_populate_prodcons_flags'),
        ('core', '0200_auto_20190923_1823'),
        ('core', '0201_aggregation_qps_lab_calculations'),
        ('core', '0202_exemptionapproved_eu_article5_flags'),
        ('core', '0203_populate_exemption_approved_flags'),
        ('core', '0204_auto_20190924_1740'),
    ]

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('activated', models.BooleanField(default=True)),
                ('is_secretariat', models.BooleanField(default=False)),
                ('is_read_only', models.BooleanField(default=True)),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
            },
            bases=(guardian.mixins.GuardianUserMixin, models.Model),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Annex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annex_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'verbose_name_plural': 'annexes',
                'db_table': 'annex',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ApprovedCriticalUse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'verbose_name_plural': 'Exemptions approved critical uses',
                'db_table': 'exemption_approved_critical_use',
            },
        ),
        migrations.CreateModel(
            name='Article7Destruction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, help_text='Remarks added by the reporting party', max_length=9999)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in their original order, as given by the user.')),
                ('quantity_destroyed', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'db_table': 'reporting_art7_destruction',
                'ordering': ['substance__sort_order', 'substance__substance_id'],
                'abstract': False,
            },
            bases=(ozone.core.models.data.AggregationMixin, ozone.core.models.reporting.ModifyPreventionMixin, ozone.core.models.data.BlendCompositionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Article7Emission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, help_text='Remarks added by the reporting party', max_length=9999)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in their original order, as given by the user.')),
                ('facility_name', models.CharField(max_length=256)),
                ('quantity_generated', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_captured_all_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_captured_feedstock', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_captured_for_destruction', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_feedstock', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_destroyed', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_emitted', models.DecimalField(decimal_places=15, max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'db_table': 'reporting_art7_emissions',
                'ordering': ['ordering_id'],
                'abstract': False,
            },
            bases=(ozone.core.models.reporting.ModifyPreventionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Article7Export',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, help_text='Remarks added by the reporting party', max_length=9999)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in their original order, as given by the user.')),
                ('quantity_total_new', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_total_recovered', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_feedstock', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_polyols', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_polyols', models.CharField(blank=True, max_length=512)),
                ('quantity_critical_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_critical_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_essential_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_essential_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_high_ambient_temperature', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_high_ambient_temperature', models.CharField(blank=True, max_length=512)),
                ('quantity_laboratory_analytical_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_laboratory_analytical_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_process_agent_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_process_agent_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_quarantine_pre_shipment', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_quarantine_pre_shipment', models.CharField(blank=True, max_length=512)),
                ('quantity_other_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_other_uses', models.CharField(blank=True, max_length=512)),
            ],
            options={
                'db_table': 'reporting_art7_exports',
                'ordering': ['substance__sort_order', 'substance__substance_id', 'blend__sort_order', 'destination_party__name'],
                'abstract': False,
            },
            bases=(ozone.core.models.data.AggregationMixin, ozone.core.models.reporting.ModifyPreventionMixin, ozone.core.models.data.PolyolsMixin, ozone.core.models.data.BlendCompositionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Article7Import',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, help_text='Remarks added by the reporting party', max_length=9999)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in their original order, as given by the user.')),
                ('quantity_total_new', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_total_recovered', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_feedstock', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_polyols', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_polyols', models.CharField(blank=True, max_length=512)),
                ('quantity_critical_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_critical_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_essential_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_essential_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_high_ambient_temperature', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_high_ambient_temperature', models.CharField(blank=True, max_length=512)),
                ('quantity_laboratory_analytical_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_laboratory_analytical_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_process_agent_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_process_agent_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_quarantine_pre_shipment', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_quarantine_pre_shipment', models.CharField(blank=True, max_length=512)),
                ('quantity_other_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_other_uses', models.CharField(blank=True, max_length=512)),
            ],
            options={
                'db_table': 'reporting_art7_imports',
                'ordering': ['substance__sort_order', 'substance__substance_id', 'blend__sort_order', 'source_party__name'],
                'abstract': False,
            },
            bases=(ozone.core.models.data.AggregationMixin, ozone.core.models.reporting.ModifyPreventionMixin, ozone.core.models.data.PolyolsMixin, ozone.core.models.data.BlendCompositionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Article7NonPartyTrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, help_text='Remarks added by the reporting party', max_length=9999)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in their original order, as given by the user.')),
                ('quantity_import_new', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_import_recovered', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_export_new', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_export_recovered', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'db_table': 'reporting_art7_npt',
                'ordering': ['substance__sort_order', 'substance__substance_id', 'blend__sort_order'],
                'abstract': False,
            },
            bases=(ozone.core.models.data.AggregationMixin, ozone.core.models.reporting.ModifyPreventionMixin, ozone.core.models.data.BlendCompositionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Article7Production',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, help_text='Remarks added by the reporting party', max_length=9999)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in their original order, as given by the user.')),
                ('quantity_critical_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_critical_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_essential_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_essential_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_high_ambient_temperature', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_high_ambient_temperature', models.CharField(blank=True, max_length=512)),
                ('quantity_laboratory_analytical_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_laboratory_analytical_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_process_agent_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_process_agent_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_quarantine_pre_shipment', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_quarantine_pre_shipment', models.CharField(blank=True, max_length=512)),
                ('quantity_other_uses', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('decision_other_uses', models.CharField(blank=True, max_length=512)),
                ('quantity_total_produced', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_feedstock', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_for_destruction', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_article_5', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'db_table': 'reporting_art7_production',
                'ordering': ['substance__sort_order', 'substance__substance_id'],
                'abstract': False,
            },
            bases=(ozone.core.models.data.AggregationMixin, ozone.core.models.reporting.ModifyPreventionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Article7Questionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_imports', models.NullBooleanField(help_text='If set to true it allows to complete imports data form.')),
                ('has_exports', models.NullBooleanField(help_text='If set to true it allows to complete exports data form.')),
                ('has_produced', models.NullBooleanField(help_text='If set to true it allows to complete productions data form.')),
                ('has_destroyed', models.NullBooleanField(help_text='If set to true it allows to complete destructions data form.')),
                ('has_nonparty', models.NullBooleanField(help_text='If set to true it allows to complete non-party trades data form.')),
                ('has_emissions', models.NullBooleanField(help_text='If set to true it allows to complete emissions data form.')),
            ],
            options={
                'db_table': 'reporting_art7_questionnaire',
            },
            bases=(ozone.core.models.reporting.ModifyPreventionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Baseline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('baseline', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'db_table': 'baseline',
            },
        ),
        migrations.CreateModel(
            name='BaselineType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Baseline types can be A5/NA5 Prod/Cons, BDN_pre2k or BDN', max_length=64)),
                ('remarks', models.CharField(blank=True, help_text='Remarks for this baseline type', max_length=9999)),
            ],
            options={
                'db_table': 'baseline_type',
            },
        ),
        migrations.CreateModel(
            name='Blend',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blend_id', models.CharField(help_text='A unique String value identifying this blend.', max_length=64, unique=True)),
                ('legacy_blend_id', models.IntegerField(blank=True, help_text='Used by data import management command, for reports that contain blends, instead of substances.', null=True, unique=True)),
                ('composition', models.CharField(blank=True, help_text='Plain-test description of the composition of the blend.', max_length=256)),
                ('other_names', models.CharField(blank=True, max_length=256)),
                ('type', models.CharField(choices=[('Zeotrope', 'ZEOTROPE'), ('Azeotrope', 'AZEOTROPE'), ('Methyl bromide', 'MeBr'), ('Other', 'OTHER'), ('Custom', 'CUSTOM')], help_text='Blend types can be Zeotrope, Azeotrope, Methyl bromide, Other or Custom.', max_length=128)),
                ('odp', models.DecimalField(blank=True, decimal_places=10, max_digits=20, null=True)),
                ('gwp', models.DecimalField(blank=True, decimal_places=10, max_digits=20, null=True)),
                ('hfc', models.NullBooleanField()),
                ('hcfc', models.NullBooleanField()),
                ('main_usage', models.CharField(blank=True, max_length=256)),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('trade_name', models.CharField(blank=True, max_length=256)),
                ('composition_alt', models.CharField(blank=True, max_length=256)),
                ('cnumber', models.CharField(blank=True, max_length=256)),
                ('sort_order', models.IntegerField(default=0, null=True)),
            ],
            options={
                'db_table': 'blend',
                'ordering': ['sort_order', 'pk'],
            },
        ),
        migrations.CreateModel(
            name='BlendComponent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('percentage', models.DecimalField(decimal_places=5, max_digits=6, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('component_name', models.CharField(blank=True, max_length=256)),
                ('cnumber', models.CharField(blank=True, max_length=256)),
                ('blend', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='components', to='core.Blend')),
            ],
            options={
                'db_table': 'blend_component',
                'ordering': ['blend__sort_order', 'substance__sort_order'],
            },
        ),
        migrations.CreateModel(
            name='ControlMeasure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('limit_type', models.CharField(choices=[('Production', 'PRODUCTION'), ('Consumption', 'CONSUMPTION'), ('BDN', 'BDN')], help_text='Control measure types can be Production, Consumption and BDN', max_length=64)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('allowed', models.DecimalField(decimal_places=5, max_digits=6, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('baseline_type', models.ForeignKey(help_text='Baseline type: A5/NA5 Prod/Cons or BDN', on_delete=django.db.models.deletion.PROTECT, related_name='control_measures', to='core.BaselineType')),
            ],
            options={
                'db_table': 'control_measure',
            },
        ),
        migrations.CreateModel(
            name='CriticalUseCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=256, unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
            ],
            options={
                'verbose_name_plural': 'critical use categories',
                'db_table': 'critical_use_category',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='DataOther',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, help_text='Remarks added by the reporting party', max_length=9999)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in their original order, as given by the user.')),
            ],
            options={
                'db_table': 'reporting_other',
            },
            bases=(ozone.core.models.reporting.ModifyPreventionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Decision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('decision_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(blank=True, max_length=256)),
                ('remark', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'db_table': 'decision',
            },
        ),
        migrations.CreateModel(
            name='DeviationSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('production', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('consumption', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('remark', models.CharField(blank=True, max_length=512)),
            ],
            options={
                'db_table': 'deviation_source',
            },
        ),
        migrations.CreateModel(
            name='DeviationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deviation_type_id', models.CharField(max_length=256, unique=True)),
                ('description', models.CharField(blank=True, max_length=256)),
                ('deviation_pc', models.CharField(choices=[('A', 'A'), ('P', 'P'), ('C', 'C')], max_length=16)),
                ('remark', models.CharField(blank=True, max_length=512)),
            ],
            options={
                'db_table': 'deviation_type',
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('from_email', models.CharField(max_length=255)),
                ('to', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), size=None)),
                ('cc', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=255), null=True, size=None)),
                ('body', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExemptionApproved',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('is_emergency', models.BooleanField(default=False)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in theiroriginal order, as given by the user.')),
                ('decision_approved', models.CharField(blank=True, max_length=256)),
                ('approved_teap_amount', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('is_article5', models.NullBooleanField()),
                ('is_eu_member', models.NullBooleanField()),
            ],
            options={
                'verbose_name_plural': 'Exemptions approved',
                'db_table': 'exemption_approved',
            },
        ),
        migrations.CreateModel(
            name='FocalPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=256)),
                ('designation', models.CharField(blank=True, max_length=512)),
                ('tel', models.CharField(blank=True, max_length=128)),
                ('email', models.CharField(blank=True, max_length=256)),
                ('fax', models.CharField(blank=True, max_length=256)),
                ('address', models.CharField(blank=True, max_length=9999)),
                ('is_licensing_system', models.BooleanField(default=False)),
                ('is_national', models.BooleanField(default=False)),
                ('ordering_id', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'focal_point',
                'ordering': ('ordering_id',),
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(default='', max_length=64, unique=True)),
                ('name_alt', models.CharField(blank=True, max_length=64, null=True, verbose_name='alternate name')),
                ('description', models.CharField(max_length=256)),
                ('description_alt', models.CharField(blank=True, max_length=1024, null=True, verbose_name='alternate description')),
                ('is_odp', models.BooleanField(default=True)),
                ('is_gwp', models.BooleanField(default=False)),
                ('phase_out_year_article_5', models.DateField(blank=True, null=True)),
                ('phase_out_year_non_article_5', models.DateField(blank=True, null=True)),
                ('annex', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='groups', to='core.Annex')),
            ],
            options={
                'db_table': 'group',
                'ordering': ('annex', 'group_id'),
            },
        ),
        migrations.CreateModel(
            name='HighAmbientTemperatureImport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, help_text='Remarks added by the reporting party', max_length=9999)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in their original order, as given by the user.')),
                ('quantity_msac', models.DecimalField(blank=True, decimal_places=15, help_text='Used in multi-split air conditioners', max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_sdac', models.DecimalField(blank=True, decimal_places=15, help_text='Used in split ducted air conditioners', max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_dcpac', models.DecimalField(blank=True, decimal_places=15, help_text='Used in ducted commercial packaged air conditioners', max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('blend', models.ForeignKey(blank=True, help_text='Blend ID', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Blend')),
                ('blend_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='core.HighAmbientTemperatureImport')),
            ],
            options={
                'db_table': 'reporting_hat_import',
                'ordering': ['substance__sort_order', 'substance__substance_id', 'blend__sort_order'],
                'abstract': False,
            },
            bases=(ozone.core.models.reporting.ModifyPreventionMixin, ozone.core.models.data.BlendCompositionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HighAmbientTemperatureProduction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, help_text='Remarks added by the reporting party', max_length=9999)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in their original order, as given by the user.')),
                ('quantity_msac', models.DecimalField(blank=True, decimal_places=15, help_text='Used in multi-split air conditioners', max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_sdac', models.DecimalField(blank=True, decimal_places=15, help_text='Used in split ducted air conditioners', max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_dcpac', models.DecimalField(blank=True, decimal_places=15, help_text='Used in ducted commercial packaged air conditioners', max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'db_table': 'reporting_hat_production',
                'ordering': ['substance__sort_order', 'substance__substance_id'],
                'abstract': False,
            },
            bases=(ozone.core.models.reporting.ModifyPreventionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubmission',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('schema_version', models.CharField(max_length=64)),
                ('submitted_at', models.DateField(null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('_workflow_class', models.CharField(choices=[('empty', 'Empty'), ('base', 'Base'), ('default', 'Default'), ('accelerated', 'Accelerated'), ('default_exemption', 'Default_exemption'), ('accelerated_exemption', 'Accelerated_exemption'), ('default_transfer', 'Default_transfer'), ('default_process_agent', 'Default_process_agent')], db_column='workflow_class', default='empty', max_length=32)),
                ('_current_state', models.CharField(blank=True, db_column='current_state', max_length=64, null=True)),
                ('_previous_state', models.CharField(blank=True, db_column='previous_state', max_length=64, null=True)),
                ('flag_provisional', models.BooleanField(default=False, help_text='If set to true it signals that future changes are foreseen.', verbose_name='provisional')),
                ('flag_valid', models.NullBooleanField(default=None, help_text='If set to true it signals that the data in the current version is considered correct. Can be set by the Secretariat during Processing or at the transition between the Processing or Finalized states.', verbose_name='valid')),
                ('flag_superseded', models.BooleanField(default=False, help_text='If set to true it means that the current version is not relevant anymore. When a newer version of data is Submitted, the current one is automatically flagged as Superseded.', verbose_name='superseded')),
                ('flag_checked_blanks', models.BooleanField(default=False, verbose_name='checked blanks')),
                ('flag_has_blanks', models.BooleanField(default=False, verbose_name='has blanks')),
                ('flag_confirmed_blanks', models.BooleanField(default=False, verbose_name='confirmed blanks')),
                ('flag_has_reported_a1', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex A Group 1 were reported.', verbose_name='has reported A/I')),
                ('flag_has_reported_a2', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex A Group 2 were reported.', verbose_name='has reported A/II')),
                ('flag_has_reported_b1', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex B Group 1 were reported.', verbose_name='has reported B/I')),
                ('flag_has_reported_b2', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex B Group 2 were reported.', verbose_name='has reported B/II')),
                ('flag_has_reported_b3', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex B Group 3 were reported.', verbose_name='has reported B/III')),
                ('flag_has_reported_c1', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex C Group 1 were reported.', verbose_name='has reported C/I')),
                ('flag_has_reported_c2', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex C Group 2 were reported.', verbose_name='has reported C/II')),
                ('flag_has_reported_c3', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex C Group 3 were reported.', verbose_name='has reported C/III')),
                ('flag_has_reported_e', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex E were reported.', verbose_name='has reported E/I')),
                ('flag_has_reported_f', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex F were reported.', verbose_name='has reported F')),
                ('date_reported_f', models.DateField(help_text='Date at which substances under Annex F were reported.', null=True)),
                ('questionnaire_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for questionnaire', max_length=9999)),
                ('questionnaire_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for questionnaire', max_length=9999)),
                ('imports_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for imports', max_length=9999)),
                ('imports_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for imports', max_length=9999)),
                ('exports_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for exports', max_length=9999)),
                ('exports_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for exports', max_length=9999)),
                ('production_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for production', max_length=9999)),
                ('production_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for production', max_length=9999)),
                ('destruction_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for destruction', max_length=9999)),
                ('destruction_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for destruction', max_length=9999)),
                ('nonparty_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for nonparty', max_length=9999)),
                ('nonparty_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for nonparty', max_length=9999)),
                ('emissions_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for emissions', max_length=9999)),
                ('emissions_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for emissions', max_length=9999)),
                ('hat_production_remarks_party', models.CharField(blank=True, help_text='General HAT obligation remarks added by the reporting party for production', max_length=9999)),
                ('hat_production_remarks_secretariat', models.CharField(blank=True, help_text='General HAT obligation remarks added by the ozone secretariat for production', max_length=9999)),
                ('hat_imports_remarks_party', models.CharField(blank=True, help_text='General HAT obligation remarks added by the reporting party for imports', max_length=9999)),
                ('hat_imports_remarks_secretariat', models.CharField(blank=True, help_text='General HAT obligation remarks added by the ozone secretariat for imports', max_length=9999)),
                ('exemption_nomination_remarks_secretariat', models.CharField(blank=True, help_text='Exemption nomination remarks added by the ozone secretariat', max_length=9999)),
                ('exemption_approved_remarks_secretariat', models.CharField(blank=True, help_text='Exemption approved remarks added by the ozone secretariat', max_length=9999)),
                ('raf_remarks_party', models.CharField(blank=True, help_text='General RAF remarks added by the reporting party', max_length=9999)),
                ('raf_remarks_secretariat', models.CharField(blank=True, help_text='General RAF remarks added by the ozone secretariat', max_length=9999)),
                ('transfers_remarks_secretariat', models.CharField(blank=True, help_text='General Transfers remarks added by the ozone secretariat', max_length=9999)),
                ('pa_uses_reported_remarks_secretariat', models.CharField(blank=True, help_text='General Process agent uses reported remarks added by the ozone secretariat', max_length=9999, verbose_name='process agent uses reported remarks')),
                ('flag_emergency', models.BooleanField(default=False, help_text='If set to true it means that ozone secretariat can fill out only the Approved form directly.', verbose_name='Emergency')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical submission',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='IllegalTrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_id', models.IntegerField(blank=True, null=True)),
                ('seizure_date_year', models.CharField(blank=True, max_length=256)),
                ('substances_traded', models.CharField(blank=True, max_length=256)),
                ('volume', models.CharField(blank=True, max_length=256)),
                ('importing_exporting_country', models.CharField(blank=True, max_length=256)),
                ('illegal_trade_details', models.CharField(blank=True, max_length=9999)),
                ('action_taken', models.CharField(blank=True, max_length=9999)),
                ('remarks', models.CharField(blank=True, max_length=9999)),
                ('ordering_id', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'illegal_trade',
                'ordering': ('ordering_id',),
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_id', models.CharField(max_length=16, unique=True)),
                ('iso', models.CharField(max_length=5, unique=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('remark', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'db_table': 'language',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='LicensingSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_ods', models.BooleanField(default=False)),
                ('date_reported_ods', models.DateField(blank=True, null=True)),
                ('has_hfc', models.BooleanField(default=False)),
                ('date_reported_hfc', models.DateField(blank=True, null=True)),
                ('remarks', models.CharField(blank=True, max_length=9999)),
            ],
            options={
                'db_table': 'licensing_system',
            },
        ),
        migrations.CreateModel(
            name='LicensingSystemFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='public/licensing-system/')),
                ('title', models.CharField(max_length=256)),
                ('licensing_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='core.LicensingSystem')),
            ],
            options={
                'db_table': 'licensing_system_file',
            },
        ),
        migrations.CreateModel(
            name='LicensingSystemURL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=1024, verbose_name='URL')),
                ('title', models.CharField(max_length=256)),
                ('licensing_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls', to='core.LicensingSystem')),
            ],
            options={
                'db_table': 'licensing_system_url',
            },
        ),
        migrations.CreateModel(
            name='Limit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('limit_type', models.CharField(choices=[('Production', 'PRODUCTION'), ('Consumption', 'CONSUMPTION'), ('BDN', 'BDN')], help_text='Limit types can be Production, Consumption and BDN', max_length=64)),
                ('limit', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limits', to='core.Group')),
            ],
            options={
                'db_table': 'limit_prod_cons',
            },
        ),
        migrations.CreateModel(
            name='MDGRegion',
            fields=[
                ('code', models.CharField(max_length=32, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('income_type', models.CharField(blank=True, choices=[('High', 'HIGH'), ('Low', 'LOW'), ('Lower-middle', 'LOWER_MIDDLE'), ('Upper-middle', 'UPPER_MIDDLE')], help_text='High, Low, Lower-middle, Upper-middle', max_length=128, null=True)),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('parent_regions', models.ManyToManyField(related_name='child_regions', to='core.MDGRegion')),
            ],
            options={
                'verbose_name': 'MDG region',
                'db_table': 'mdg_region',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting_id', models.CharField(max_length=16, unique=True)),
                ('treaty_flag', models.BooleanField(default=False)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('location', models.CharField(max_length=128)),
                ('description', models.CharField(max_length=128)),
            ],
            options={
                'db_table': 'meeting',
                'ordering': ('pk',),
            },
        ),
        migrations.CreateModel(
            name='MultilateralFund',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('funds_approved', models.IntegerField()),
                ('funds_disbursed', models.IntegerField()),
                ('date_approved', models.DateField(null=True)),
                ('date_disbursed', models.DateField(null=True)),
            ],
            options={
                'db_table': 'multilateral_fund',
            },
        ),
        migrations.CreateModel(
            name='Nomination',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('is_emergency', models.BooleanField(default=False)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in theiroriginal order, as given by the user.')),
            ],
            options={
                'db_table': 'exemption_nomination',
            },
        ),
        migrations.CreateModel(
            name='Obligation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A unique String value identifying this obligation.', max_length=256, unique=True)),
                ('description', models.CharField(blank=True, max_length=256)),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether reporting can be performed for this obligation.')),
                ('has_reporting_periods', models.BooleanField(default=True, help_text='Indicates whether reporting is done periodically or upon certain events (e.g. transfers)')),
                ('has_versions', models.BooleanField(default=True, help_text='Indicates whether submissions for this obligation can have multiple versions')),
                ('_obligation_type', models.CharField(choices=[('art7', 'ART7'), ('essencrit', 'ESSENCRIT'), ('hat', 'HAT'), ('other', 'OTHER'), ('exemption', 'EXEMPTION'), ('transfer', 'TRANSFER'), ('procagent', 'PROCAGENT'), ('labuses', 'LABUSES'), ('art4b', 'ART4B'), ('art9', 'ART9'), ('reqchanges', 'REQCHANGES'), ('odsstrategies', 'ODSSTRATEGIES'), ('unwantedimports', 'UNWANTEDIMPORTS')], help_text='Used to generate the correct form and filter obligations.', max_length=64, null=True)),
                ('sort_order', models.IntegerField(null=True)),
                ('other', models.BooleanField(default=False, help_text='Unset when this obligation is a main one. The main ones are: Article 7, Essential and Critical uses (RAF) and Transfer or addition of production or consumption.')),
                ('is_default', models.NullBooleanField(default=None, help_text="If set to true it means that the current obligation is used as default for 'Data entry submissions' and 'All submissions' sections.")),
            ],
            options={
                'db_table': 'core_obligation',
            },
        ),
        migrations.CreateModel(
            name='ORMReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meeting', models.CharField(blank=True, max_length=64)),
                ('description', models.CharField(blank=True, max_length=9999)),
                ('url', models.URLField(blank=True, max_length=1024, null=True, verbose_name='URL')),
            ],
            options={
                'verbose_name': 'ORM report',
                'db_table': 'orm_report',
            },
        ),
        migrations.CreateModel(
            name='OtherCountryProfileData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=9999)),
                ('file', models.FileField(blank=True, null=True, upload_to='public/other-country-profile-data/')),
                ('url', models.URLField(blank=True, max_length=1024, null=True, verbose_name='URL')),
                ('url_type', models.CharField(choices=[('Submission', 'SUBMISSION'), ('Publication', 'PUBLICATION')], max_length=64, null=True)),
                ('remarks_secretariat', models.CharField(blank=True, max_length=9999)),
                ('obligation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='other_country_profile_data', to='core.Obligation')),
            ],
            options={
                'verbose_name_plural': 'other country profile data',
                'db_table': 'other_country_profile_data',
            },
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('abbr', models.CharField(max_length=32, unique=True)),
                ('remark', models.CharField(blank=True, max_length=9999)),
                ('iso_alpha3_code', models.CharField(blank=True, max_length=3)),
                ('abbr_alt', models.CharField(blank=True, max_length=6)),
                ('name_alt', models.CharField(blank=True, max_length=256)),
                ('sign_date_vc', models.DateField(blank=True, null=True)),
                ('sign_date_mp', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the party can submit new reports.Only necessary for backwards compatibility')),
                ('mdg_region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='party', to='core.MDGRegion')),
                ('parent_party', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_parties', to='core.Party')),
            ],
            options={
                'verbose_name_plural': 'parties',
                'db_table': 'party',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='PartyDeclaration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('declaration', models.TextField()),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='declarations', to='core.Party')),
            ],
            options={
                'db_table': 'party_declaration',
            },
        ),
        migrations.CreateModel(
            name='PartyHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('population', models.IntegerField()),
                ('is_high_ambient_temperature', models.BooleanField()),
                ('is_eu_member', models.BooleanField()),
                ('is_ceit', models.BooleanField()),
                ('is_article5', models.BooleanField()),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='history', to='core.Party')),
            ],
            options={
                'verbose_name_plural': 'parties history',
                'db_table': 'party_history',
                'ordering': ('party', 'reporting_period'),
            },
        ),
        migrations.CreateModel(
            name='PartyRatification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ratification_type', models.CharField(blank=True, choices=[('Accession', 'ACCESSION'), ('Approval', 'APPROVAL'), ('Acceptance', 'ACCEPTANCE'), ('Ratification', 'RATIFICATION'), ('Succession', 'SUCCESSION'), ('Signing', 'SIGNING')], max_length=40)),
                ('ratification_date', models.DateField()),
                ('entry_into_force_date', models.DateField(blank=True, null=True)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ratifications', to='core.Party')),
            ],
            options={
                'db_table': 'party_ratification',
            },
        ),
        migrations.CreateModel(
            name='PartyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbr', models.CharField(max_length=32, unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
            ],
            options={
                'db_table': 'party_type',
            },
        ),
        migrations.CreateModel(
            name='PlanOfAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('benchmark', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('annex_group_description', models.CharField(blank=True, max_length=256, verbose_name='annex group description')),
                ('combined_id', models.BooleanField(default=False)),
                ('is_valid', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'plans of action',
                'db_table': 'plan_of_action',
                'ordering': ('party__name', '-reporting_period', 'group'),
            },
        ),
        migrations.CreateModel(
            name='PlanOfActionDecision',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_adopted', models.PositiveIntegerField()),
                ('decision', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Decision')),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Party')),
            ],
            options={
                'db_table': 'plan_of_action_decision',
                'ordering': ('-year_adopted', 'party__name'),
            },
        ),
        migrations.CreateModel(
            name='ProcessAgentApplication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('counter', models.PositiveIntegerField()),
                ('application', models.CharField(max_length=256)),
                ('remark', models.CharField(blank=True, max_length=9999)),
            ],
            options={
                'db_table': 'pa_application',
            },
        ),
        migrations.CreateModel(
            name='ProcessAgentApplicationValidity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('decision', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='applications_validity', to='core.Decision')),
            ],
            options={
                'verbose_name_plural': 'process agent applications validity',
                'db_table': 'pa_applications_validity',
            },
        ),
        migrations.CreateModel(
            name='ProcessAgentContainTechnology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=9999)),
            ],
            options={
                'verbose_name_plural': 'process agent contain technologies',
                'db_table': 'pa_contain_technology',
            },
        ),
        migrations.CreateModel(
            name='ProcessAgentEmissionLimit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('makeup_consumption', models.DecimalField(decimal_places=15, max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('max_emissions', models.DecimalField(decimal_places=15, max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('remark', models.CharField(blank=True, max_length=9999)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='process_agent_emission_limits', to='core.Party')),
            ],
            options={
                'db_table': 'limit_pa_emission',
            },
        ),
        migrations.CreateModel(
            name='ProcessAgentEmissionLimitValidity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(null=True)),
                ('end_date', models.DateField(null=True)),
                ('decision', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, related_name='limits_validity', to='core.Decision')),
            ],
            options={
                'verbose_name_plural': 'process agent emission limits validity',
                'db_table': 'pa_emission_limit_validity',
            },
        ),
        migrations.CreateModel(
            name='ProcessAgentUsesReported',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('makeup_quantity', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('emissions', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('units', models.CharField(blank=True, choices=[('MT', 'Metric Tonnes'), ('ODP tonnes', 'ODP Tonnes')], max_length=64, null=True)),
                ('remark', models.CharField(blank=True, max_length=9999)),
                ('application', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pa_uses_reported', to='core.ProcessAgentApplication')),
                ('contain_technologies', models.ManyToManyField(blank=True, to='core.ProcessAgentContainTechnology')),
                ('decision', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pa_uses_reported', to='core.Decision')),
            ],
            options={
                'verbose_name_plural': 'process agent uses reported',
                'db_table': 'pa_uses_reported',
            },
        ),
        migrations.CreateModel(
            name='ProdCons',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_article5', models.NullBooleanField()),
                ('is_eu_member', models.NullBooleanField()),
                ('submissions', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('production_all_new', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_feedstock', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_essential_uses', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_laboratory_analytical_uses', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_article_5', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_quarantine', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_process_agent', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('destroyed', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_new', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_recovered', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_feedstock', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_essential_uses', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_laboratory_uses', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_quarantine', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_process_agent', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_new', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_recovered', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_feedstock', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_essential_uses', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_quarantine', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_process_agent', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('non_party_import', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('non_party_export', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('prod_transfer', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('cons_transfer', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('calculated_production', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('calculated_consumption', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('calculated_qps_production', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('calculated_qps_consumption', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('calculated_laboratory_production', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('calculated_laboratory_consumption', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('baseline_prod', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('baseline_cons', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('baseline_bdn', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('limit_prod', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('limit_cons', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('limit_bdn', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('group', models.ForeignKey(help_text='Annex Group for which this aggregation was calculated', on_delete=django.db.models.deletion.PROTECT, related_name='prodcons_aggregations', to='core.Group')),
                ('party', models.ForeignKey(help_text='Party for which this aggregation was calculated', on_delete=django.db.models.deletion.PROTECT, related_name='prodcons_aggregations', to='core.Party')),
            ],
            options={
                'verbose_name_plural': 'Production consumptions',
                'db_table': 'aggregation_prod_cons',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProdConsMT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_article5', models.NullBooleanField()),
                ('is_eu_member', models.NullBooleanField()),
                ('submissions', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('production_all_new', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_feedstock', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_essential_uses', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_laboratory_analytical_uses', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_article_5', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_quarantine', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('production_process_agent', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('destroyed', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_new', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_recovered', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_feedstock', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_essential_uses', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_laboratory_uses', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_quarantine', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('import_process_agent', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_new', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_recovered', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_feedstock', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_essential_uses', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_quarantine', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('export_process_agent', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('non_party_import', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('non_party_export', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('prod_transfer', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('cons_transfer', models.DecimalField(decimal_places=15, default=Decimal('0.0'), max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('calculated_production', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('calculated_consumption', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('calculated_qps_production', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('calculated_qps_consumption', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('calculated_laboratory_production', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('calculated_laboratory_consumption', models.DecimalField(blank=True, decimal_places=15, default=None, max_digits=25, null=True)),
                ('party', models.ForeignKey(help_text='Party for which this aggregation was calculated', on_delete=django.db.models.deletion.PROTECT, related_name='prodconsmt_aggregations', to='core.Party')),
            ],
            options={
                'verbose_name_plural': 'Production consumptions metric tonnes',
                'db_table': 'aggregation_prod_cons_mt',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RAFImport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=15, max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('party', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Party')),
            ],
            options={
                'db_table': 'reporting_raf_import',
            },
            bases=(ozone.core.models.reporting.ModifyPreventionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RAFReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks_party', models.CharField(blank=True, help_text='Remarks added by the reporting party', max_length=9999)),
                ('remarks_os', models.CharField(blank=True, help_text='Remarks added by the ozone secretariat', max_length=9999)),
                ('ordering_id', models.IntegerField(default=0, help_text='This allows the interface to keep the data entries in their original order, as given by the user.')),
                ('is_emergency', models.BooleanField(default=False)),
                ('quantity_exempted', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_production', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_used', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_exported', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity_destroyed', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('on_hand_start_year', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
            ],
            options={
                'db_table': 'reporting_raf',
                'ordering': ['substance__sort_order', 'substance__substance_id'],
            },
            bases=(ozone.core.models.reporting.ModifyPreventionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RAFReportUseCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(blank=True, decimal_places=15, max_digits=25, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('critical_use_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='use_categories', to='core.CriticalUseCategory')),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='use_categories', to='core.RAFReport')),
            ],
            options={
                'db_table': 'reporting_raf_use_category',
            },
            bases=(ozone.core.models.reporting.ModifyPreventionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ReclamationFacility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_reported', models.DateField(null=True)),
                ('name', models.CharField(blank=True, max_length=256)),
                ('address', models.CharField(blank=True, max_length=512)),
                ('reclaimed_substances', models.CharField(blank=True, max_length=512)),
                ('capacity', models.CharField(blank=True, max_length=64)),
                ('remarks', models.CharField(blank=True, max_length=9999)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reclamation_facilities', to='core.Party')),
            ],
            options={
                'verbose_name_plural': 'reclamation facilities',
                'db_table': 'reclamation_facility',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbr', models.CharField(max_length=32, unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('remark', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'db_table': 'region',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ReportingChannel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.CharField(blank=True, max_length=256)),
                ('is_default_party', models.BooleanField(default=False)),
                ('is_default_secretariat', models.BooleanField(default=False)),
                ('is_default_for_cloning', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'reporting_channel',
            },
        ),
        migrations.CreateModel(
            name='ReportingPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('is_reporting_allowed', models.BooleanField(default=True, help_text='Indicates whether reporting can be performed for this reporting period. Will be False for baseline years.')),
                ('is_reporting_open', models.BooleanField(default=False, help_text='Indicates whether reporting is open/ongoing for this reporting period.')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('description', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'db_table': 'reporting_period',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schema_version', models.CharField(max_length=64)),
                ('submitted_at', models.DateField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('version', models.PositiveSmallIntegerField(default=1)),
                ('_workflow_class', models.CharField(choices=[('empty', 'Empty'), ('base', 'Base'), ('default', 'Default'), ('accelerated', 'Accelerated'), ('default_exemption', 'Default_exemption'), ('accelerated_exemption', 'Accelerated_exemption'), ('default_transfer', 'Default_transfer'), ('default_process_agent', 'Default_process_agent')], db_column='workflow_class', default='empty', max_length=32)),
                ('_current_state', models.CharField(blank=True, db_column='current_state', max_length=64, null=True)),
                ('_previous_state', models.CharField(blank=True, db_column='previous_state', max_length=64, null=True)),
                ('flag_provisional', models.BooleanField(default=False, help_text='If set to true it signals that future changes are foreseen.', verbose_name='provisional')),
                ('flag_valid', models.NullBooleanField(default=None, help_text='If set to true it signals that the data in the current version is considered correct. Can be set by the Secretariat during Processing or at the transition between the Processing or Finalized states.', verbose_name='valid')),
                ('flag_superseded', models.BooleanField(default=False, help_text='If set to true it means that the current version is not relevant anymore. When a newer version of data is Submitted, the current one is automatically flagged as Superseded.', verbose_name='superseded')),
                ('flag_checked_blanks', models.BooleanField(default=False, verbose_name='checked blanks')),
                ('flag_has_blanks', models.BooleanField(default=False, verbose_name='has blanks')),
                ('flag_confirmed_blanks', models.BooleanField(default=False, verbose_name='confirmed blanks')),
                ('flag_has_reported_a1', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex A Group 1 were reported.', verbose_name='has reported A/I')),
                ('flag_has_reported_a2', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex A Group 2 were reported.', verbose_name='has reported A/II')),
                ('flag_has_reported_b1', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex B Group 1 were reported.', verbose_name='has reported B/I')),
                ('flag_has_reported_b2', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex B Group 2 were reported.', verbose_name='has reported B/II')),
                ('flag_has_reported_b3', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex B Group 3 were reported.', verbose_name='has reported B/III')),
                ('flag_has_reported_c1', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex C Group 1 were reported.', verbose_name='has reported C/I')),
                ('flag_has_reported_c2', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex C Group 2 were reported.', verbose_name='has reported C/II')),
                ('flag_has_reported_c3', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex C Group 3 were reported.', verbose_name='has reported C/III')),
                ('flag_has_reported_e', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex E were reported.', verbose_name='has reported E/I')),
                ('flag_has_reported_f', models.BooleanField(default=False, help_text='If set to true it means that substances under Annex F were reported.', verbose_name='has reported F')),
                ('date_reported_f', models.DateField(help_text='Date at which substances under Annex F were reported.', null=True)),
                ('questionnaire_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for questionnaire', max_length=9999)),
                ('questionnaire_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for questionnaire', max_length=9999)),
                ('imports_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for imports', max_length=9999)),
                ('imports_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for imports', max_length=9999)),
                ('exports_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for exports', max_length=9999)),
                ('exports_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for exports', max_length=9999)),
                ('production_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for production', max_length=9999)),
                ('production_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for production', max_length=9999)),
                ('destruction_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for destruction', max_length=9999)),
                ('destruction_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for destruction', max_length=9999)),
                ('nonparty_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for nonparty', max_length=9999)),
                ('nonparty_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for nonparty', max_length=9999)),
                ('emissions_remarks_party', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the reporting party for emissions', max_length=9999)),
                ('emissions_remarks_secretariat', models.CharField(blank=True, help_text='General Article7 obligation remarks added by the ozone secretariat for emissions', max_length=9999)),
                ('hat_production_remarks_party', models.CharField(blank=True, help_text='General HAT obligation remarks added by the reporting party for production', max_length=9999)),
                ('hat_production_remarks_secretariat', models.CharField(blank=True, help_text='General HAT obligation remarks added by the ozone secretariat for production', max_length=9999)),
                ('hat_imports_remarks_party', models.CharField(blank=True, help_text='General HAT obligation remarks added by the reporting party for imports', max_length=9999)),
                ('hat_imports_remarks_secretariat', models.CharField(blank=True, help_text='General HAT obligation remarks added by the ozone secretariat for imports', max_length=9999)),
                ('exemption_nomination_remarks_secretariat', models.CharField(blank=True, help_text='Exemption nomination remarks added by the ozone secretariat', max_length=9999)),
                ('exemption_approved_remarks_secretariat', models.CharField(blank=True, help_text='Exemption approved remarks added by the ozone secretariat', max_length=9999)),
                ('raf_remarks_party', models.CharField(blank=True, help_text='General RAF remarks added by the reporting party', max_length=9999)),
                ('raf_remarks_secretariat', models.CharField(blank=True, help_text='General RAF remarks added by the ozone secretariat', max_length=9999)),
                ('transfers_remarks_secretariat', models.CharField(blank=True, help_text='General Transfers remarks added by the ozone secretariat', max_length=9999)),
                ('pa_uses_reported_remarks_secretariat', models.CharField(blank=True, help_text='General Process agent uses reported remarks added by the ozone secretariat', max_length=9999, verbose_name='process agent uses reported remarks')),
                ('flag_emergency', models.BooleanField(default=False, help_text='If set to true it means that ozone secretariat can fill out only the Approved form directly.', verbose_name='Emergency')),
                ('cloned_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clones', to='core.Submission')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions_created', to=settings.AUTH_USER_MODEL)),
                ('last_edited_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions_last_edited', to=settings.AUTH_USER_MODEL)),
                ('obligation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions', to='core.Obligation')),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions', to='core.Party')),
                ('reporting_channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='submission', to='core.ReportingChannel')),
                ('reporting_period', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='submissions', to='core.ReportingPeriod')),
            ],
            options={
                'db_table': 'submission',
            },
        ),
        migrations.CreateModel(
            name='SubmissionFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('tus_id', models.CharField(blank=True, max_length=32, null=True)),
                ('upload_successful', models.BooleanField(default=False)),
                ('description', models.CharField(blank=True, max_length=512)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('original_name', models.CharField(blank=True, default='', max_length=512)),
                ('suffix', models.PositiveSmallIntegerField(default=0)),
                ('file', models.FileField(blank=True, null=True, upload_to=ozone.core.models.file.default_upload_to)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='core.Submission')),
                ('uploader', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='uploaded_files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'submission_file',
            },
        ),
        migrations.CreateModel(
            name='SubmissionFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.CharField(blank=True, max_length=256)),
                ('is_default_party', models.BooleanField(default=False, help_text='Indicates whether this submission format is default for party.', verbose_name='Is default for parties')),
            ],
            options={
                'db_table': 'submission_format',
            },
        ),
        migrations.CreateModel(
            name='SubmissionInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reporting_officer', models.CharField(blank=True, max_length=256)),
                ('designation', models.CharField(blank=True, max_length=256)),
                ('organization', models.CharField(blank=True, max_length=256)),
                ('postal_address', models.CharField(blank=True, max_length=512)),
                ('phone', models.CharField(blank=True, max_length=128)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='infos', to='core.Party')),
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='info', to='core.Submission')),
                ('submission_format', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='infos', to='core.SubmissionFormat')),
            ],
            options={
                'db_table': 'submission_info',
            },
            bases=(ozone.core.models.reporting.ModifyPreventionMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Subregion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('abbr', models.CharField(max_length=32)),
                ('name', models.CharField(max_length=256)),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subregions', to='core.Region')),
            ],
            options={
                'db_table': 'subregion',
                'ordering': ('region', 'name'),
            },
        ),
        migrations.CreateModel(
            name='Substance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('substance_id', models.IntegerField(unique=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(max_length=256)),
                ('odp', models.DecimalField(decimal_places=10, max_digits=20)),
                ('min_odp', models.DecimalField(decimal_places=10, max_digits=20)),
                ('max_odp', models.DecimalField(decimal_places=10, max_digits=20)),
                ('gwp', models.DecimalField(blank=True, decimal_places=10, max_digits=20, null=True)),
                ('formula', models.CharField(blank=True, max_length=256, null=True)),
                ('number_of_isomers', models.SmallIntegerField(blank=True, null=True)),
                ('gwp2', models.DecimalField(blank=True, decimal_places=10, max_digits=20, null=True)),
                ('gwp_error_plus_minus', models.DecimalField(blank=True, decimal_places=10, max_digits=20, null=True)),
                ('gwp_baseline', models.DecimalField(blank=True, decimal_places=10, max_digits=20, null=True)),
                ('carbons', models.CharField(blank=True, max_length=128)),
                ('hydrogens', models.CharField(blank=True, max_length=128)),
                ('fluorines', models.CharField(blank=True, max_length=128)),
                ('chlorines', models.CharField(blank=True, max_length=128)),
                ('bromines', models.CharField(blank=True, max_length=128)),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('r_code', models.CharField(blank=True, max_length=128, null=True, unique=True)),
                ('main_usage', models.CharField(blank=True, max_length=256)),
                ('sort_order', models.IntegerField(null=True)),
                ('is_contained_in_polyols', models.BooleanField()),
                ('is_captured', models.BooleanField(default=False)),
                ('has_critical_uses', models.BooleanField(default=False)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='substances', to='core.Group')),
            ],
            options={
                'db_table': 'substance',
                'ordering': ['sort_order', 'pk'],
            },
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transfer_type', models.CharField(choices=[('P', 'Production'), ('C', 'Consumption')], max_length=1)),
                ('transferred_amount', models.DecimalField(decimal_places=15, max_digits=25, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('is_basic_domestic_need', models.BooleanField(default=False)),
                ('destination_party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_transfers', to='core.Party')),
                ('destination_party_submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transfers_to', to='core.Submission')),
                ('reporting_period', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transfers', to='core.ReportingPeriod')),
                ('source_party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sent_transfers', to='core.Party')),
                ('source_party_submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transfers_from', to='core.Submission')),
                ('substance', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance')),
            ],
            options={
                'db_table': 'reporting_transfer',
            },
        ),
        migrations.CreateModel(
            name='Treaty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treaty_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=64, unique=True)),
                ('date', models.DateField()),
                ('entry_into_force_date', models.DateField()),
                ('base_year', models.IntegerField(null=True)),
                ('description', models.CharField(blank=True, max_length=256)),
                ('meeting_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='treaty', to='core.Meeting')),
            ],
            options={
                'verbose_name_plural': 'treaties',
                'db_table': 'treaty',
            },
        ),
        migrations.CreateModel(
            name='UploadToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(db_index=True, default=ozone.core.models.file.default_token, max_length=100, unique=True)),
                ('filename', models.CharField(max_length=256)),
                ('tus_id', models.CharField(blank=True, max_length=32, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('valid_until', models.DateTimeField(default=ozone.core.models.file.token_valid_until)),
                ('submission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='upload_tokens', to='core.Submission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='upload_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'upload_token',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='UsesType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uses_type_id', models.CharField(max_length=16, unique=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('remark', models.CharField(blank=True, max_length=256)),
                ('decision_flag', models.BooleanField()),
                ('forms', models.CharField(blank=True, max_length=256)),
            ],
            options={
                'db_table': 'uses_type',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, null=True, upload_to='public/website/')),
                ('url', models.URLField(blank=True, max_length=1024, null=True, verbose_name='URL')),
                ('description', models.CharField(blank=True, max_length=9999)),
                ('is_url_broken', models.BooleanField(default=False)),
                ('ordering_id', models.IntegerField(default=0)),
                ('party', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='websites', to='core.Party')),
            ],
            options={
                'db_table': 'website',
            },
        ),
        migrations.AddField(
            model_name='rafreport',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rafreports', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='rafreport',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='rafimport',
            name='report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imports', to='core.RAFReport'),
        ),
        migrations.AddField(
            model_name='prodconsmt',
            name='reporting_period',
            field=models.ForeignKey(help_text='Reporting Period for which this aggregation was calculated', on_delete=django.db.models.deletion.PROTECT, related_name='prodconsmt_aggregations', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='prodconsmt',
            name='substance',
            field=models.ForeignKey(help_text='Substance for which this aggregation was calculated', on_delete=django.db.models.deletion.PROTECT, related_name='prodconsmt_aggregations', to='core.Substance'),
        ),
        migrations.AddField(
            model_name='prodcons',
            name='reporting_period',
            field=models.ForeignKey(help_text='Reporting Period for which this aggregation was calculated', on_delete=django.db.models.deletion.PROTECT, related_name='prodcons_aggregations', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='processagentusesreported',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pa_uses_reported', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='processagentemissionlimit',
            name='validity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pa_emission_limits', to='core.ProcessAgentEmissionLimitValidity'),
        ),
        migrations.AddField(
            model_name='processagentapplication',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='processagentapplication',
            name='validity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pa_applications', to='core.ProcessAgentApplicationValidity'),
        ),
        migrations.AddField(
            model_name='planofaction',
            name='decision',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='plans_of_action', to='core.PlanOfActionDecision'),
        ),
        migrations.AddField(
            model_name='planofaction',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='plans_of_action', to='core.Group'),
        ),
        migrations.AddField(
            model_name='planofaction',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='plans_of_action', to='core.Party'),
        ),
        migrations.AddField(
            model_name='planofaction',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='plans_of_action', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='partyratification',
            name='treaty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ratifications', to='core.Treaty'),
        ),
        migrations.AddField(
            model_name='partyhistory',
            name='party_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='party_histories', to='core.PartyType'),
        ),
        migrations.AddField(
            model_name='partyhistory',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='party_histories', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='party',
            name='subregion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='parties', to='core.Subregion'),
        ),
        migrations.AddField(
            model_name='othercountryprofiledata',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='other_country_profile_data', to='core.Party'),
        ),
        migrations.AddField(
            model_name='othercountryprofiledata',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='other_country_profile_data', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='othercountryprofiledata',
            name='submission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='other_country_profile_data', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='ormreport',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orm_reports', to='core.Party'),
        ),
        migrations.AddField(
            model_name='ormreport',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orm_reports', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='nomination',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='nominations', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='nomination',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='multilateralfund',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='multilateral_funds', to='core.Party'),
        ),
        migrations.AddField(
            model_name='limit',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limits', to='core.Party'),
        ),
        migrations.AddField(
            model_name='limit',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='limits', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='licensingsystem',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='licensing_systems', to='core.Party'),
        ),
        migrations.AddField(
            model_name='licensingsystem',
            name='submission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='licensing_systems', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='illegaltrade',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='illegal_trades', to='core.Party'),
        ),
        migrations.AddField(
            model_name='historicalsubmission',
            name='cloned_from',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='historicalsubmission',
            name='created_by',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalsubmission',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalsubmission',
            name='last_edited_by',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalsubmission',
            name='obligation',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Obligation'),
        ),
        migrations.AddField(
            model_name='historicalsubmission',
            name='party',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Party'),
        ),
        migrations.AddField(
            model_name='historicalsubmission',
            name='reporting_channel',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.ReportingChannel'),
        ),
        migrations.AddField(
            model_name='historicalsubmission',
            name='reporting_period',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='highambienttemperatureproduction',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='highambienttemperatureproductions', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='highambienttemperatureproduction',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='highambienttemperatureimport',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='highambienttemperatureimports', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='highambienttemperatureimport',
            name='substance',
            field=models.ForeignKey(blank=True, help_text='Substance ID', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='group',
            name='control_treaty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='control_substance_groups', to='core.Treaty'),
        ),
        migrations.AddField(
            model_name='group',
            name='report_treaty',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='report_substance_groups', to='core.Treaty'),
        ),
        migrations.AddField(
            model_name='focalpoint',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='focal_points', to='core.Party'),
        ),
        migrations.AddField(
            model_name='focalpoint',
            name='submission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='focal_points', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='exemptionapproved',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='exemptionapproveds', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='exemptionapproved',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='email',
            name='submission',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='emails', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='deviationsource',
            name='deviation_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deviation_sources', to='core.DeviationType'),
        ),
        migrations.AddField(
            model_name='deviationsource',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deviation_sources', to='core.Group'),
        ),
        migrations.AddField(
            model_name='deviationsource',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deviation_sources', to='core.Party'),
        ),
        migrations.AddField(
            model_name='deviationsource',
            name='reporting_period',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='deviation_sources', to='core.ReportingPeriod'),
        ),
        migrations.AddField(
            model_name='decision',
            name='meeting',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='decisions', to='core.Meeting'),
        ),
        migrations.AddField(
            model_name='dataother',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='dataothers', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='controlmeasure',
            name='group',
            field=models.ForeignKey(help_text='Annex group', on_delete=django.db.models.deletion.PROTECT, related_name='control_measures', to='core.Group'),
        ),
        migrations.AddField(
            model_name='controlmeasure',
            name='party_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='control_measures', to='core.PartyType'),
        ),
        migrations.AddField(
            model_name='blendcomponent',
            name='substance',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='blends', to='core.Substance'),
        ),
        migrations.AddField(
            model_name='blend',
            name='party',
            field=models.ForeignKey(blank=True, help_text='Only custom blends will be associated with a Party.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='custom_blends', to='core.Party'),
        ),
        migrations.AddField(
            model_name='baseline',
            name='baseline_type',
            field=models.ForeignKey(help_text='Baseline type: A5/NA5 Prod/Cons or BDN', on_delete=django.db.models.deletion.PROTECT, related_name='baselines', to='core.BaselineType'),
        ),
        migrations.AddField(
            model_name='baseline',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='baselines', to='core.Group'),
        ),
        migrations.AddField(
            model_name='baseline',
            name='party',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='baselines', to='core.Party'),
        ),
        migrations.AddField(
            model_name='article7questionnaire',
            name='submission',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='article7questionnaire', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7production',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='article7productions', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7production',
            name='substance',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='article7nonpartytrade',
            name='blend',
            field=models.ForeignKey(blank=True, help_text='Blend ID', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Blend'),
        ),
        migrations.AddField(
            model_name='article7nonpartytrade',
            name='blend_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='core.Article7NonPartyTrade'),
        ),
        migrations.AddField(
            model_name='article7nonpartytrade',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='article7nonpartytrades', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7nonpartytrade',
            name='substance',
            field=models.ForeignKey(blank=True, help_text='Substance ID', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='article7nonpartytrade',
            name='trade_party',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Party'),
        ),
        migrations.AddField(
            model_name='article7import',
            name='blend',
            field=models.ForeignKey(blank=True, help_text='Blend ID', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Blend'),
        ),
        migrations.AddField(
            model_name='article7import',
            name='blend_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='core.Article7Import'),
        ),
        migrations.AddField(
            model_name='article7import',
            name='source_party',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='article7imports_from', to='core.Party'),
        ),
        migrations.AddField(
            model_name='article7import',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='article7imports', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7import',
            name='substance',
            field=models.ForeignKey(blank=True, help_text='Substance ID', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='article7export',
            name='blend',
            field=models.ForeignKey(blank=True, help_text='Blend ID', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Blend'),
        ),
        migrations.AddField(
            model_name='article7export',
            name='blend_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='core.Article7Export'),
        ),
        migrations.AddField(
            model_name='article7export',
            name='destination_party',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='article7exports_to', to='core.Party'),
        ),
        migrations.AddField(
            model_name='article7export',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='article7exports', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7export',
            name='substance',
            field=models.ForeignKey(blank=True, help_text='Substance ID', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='article7emission',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='article7emissions', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7destruction',
            name='blend',
            field=models.ForeignKey(blank=True, help_text='Blend ID', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Blend'),
        ),
        migrations.AddField(
            model_name='article7destruction',
            name='blend_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='components', to='core.Article7Destruction'),
        ),
        migrations.AddField(
            model_name='article7destruction',
            name='submission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='article7destructions', to='core.Submission'),
        ),
        migrations.AddField(
            model_name='article7destruction',
            name='substance',
            field=models.ForeignKey(blank=True, help_text='Substance ID', null=True, on_delete=django.db.models.deletion.PROTECT, to='core.Substance'),
        ),
        migrations.AddField(
            model_name='approvedcriticaluse',
            name='critical_use_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approved_uses', to='core.CriticalUseCategory'),
        ),
        migrations.AddField(
            model_name='approvedcriticaluse',
            name='exemption',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approved_uses', to='core.ExemptionApproved'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='language',
            field=models.ForeignKey(default=3, on_delete=django.db.models.deletion.PROTECT, related_name='users', to='core.Language'),
        ),
        migrations.AddField(
            model_name='user',
            name='party',
            field=models.ForeignKey(blank=True, limit_choices_to=models.Q(parent_party_id=django.db.models.expressions.F('id')), null=True, on_delete=django.db.models.deletion.PROTECT, related_name='users', to='core.Party'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='subregion',
            unique_together={('abbr', 'region')},
        ),
        migrations.AlterUniqueTogether(
            name='submission',
            unique_together={('party', 'reporting_period', 'obligation', 'version')},
        ),
        migrations.AlterUniqueTogether(
            name='prodconsmt',
            unique_together={('party', 'reporting_period', 'substance')},
        ),
        migrations.AlterUniqueTogether(
            name='prodcons',
            unique_together={('party', 'reporting_period', 'group')},
        ),
        migrations.AlterUniqueTogether(
            name='planofaction',
            unique_together={('party', 'reporting_period', 'group', 'is_valid')},
        ),
        migrations.AlterUniqueTogether(
            name='partyhistory',
            unique_together={('party', 'reporting_period')},
        ),
        migrations.AlterUniqueTogether(
            name='deviationsource',
            unique_together={('party', 'reporting_period', 'group', 'deviation_type')},
        ),
    ]
